/**
 * @author watson
 * @version V1.0
 * @since 2018/03/20



 * @跨站脚本攻击xss：当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，
 						这就会产生跨站脚本攻击。xss允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、
 						或者将用户转向恶意网站（重定向）。
 * @本质：是“HTML注入”，用户的数据被当成了HTML代码一部分来执行，从而混淆了原本的语义，产生了新的语义。
 * @xss攻击手段：注入恶意的html／javascript代码到用户浏览器网页上，从而达到cookie资料窃取、会话劫持、钓鱼欺骗等攻击
 * @原因：
 				1.web浏览器本身的设计不安全，浏览器不会判断自己解析和执行的js代码是否安全；
 				2.输入和输出时web应用程序最基本的交互，在这过程中，浏览器没有相关的安全防护；
 				3.web开发人员没有做响应的防护措施；
 * @防御措施：
 				1.HttpOnly  浏览器禁止页面的JS访问带有HttpOnly属性的Cookie。
 				2.输入检查 XSS Filter   对输入内容做格式检查，类似“白名单”，可以让一些基于特殊字符的攻击失效。在客户端JS和服务器端代码中实现相同的输入检查（服务器端必须有）。
 				3.输出检查     在变量输出到html页面时，可以使用编码或转义的方式来防御XSS攻击  HtmlEncode：将字符转成HTMLEntities，对应的标准是ISO-8859-1。
                                  &  --> &amp;   < --> &lt;    > -->&gt;    " --> &quot;    ' --> &#x27;     / --> &#x2F;
                                  JS中可以使用JavascriptEncode。需要对“\”对特殊字符转义，输出的变量的必须在引号内部。
        4.富文本 防御方法：与输入检查的思路一致。使用"XSS Filter"：“事件”应该被严格禁止；一些危险的标签：<iframe>、<script>、<base>、<form>等也应严格禁止；在标签、属性、事件的选择上，应该使用白名单，避免使用黑名单。比如，只允许<a>、<img>、<div>等比较“安全”的标签存在。可使用一些开源项目：Anti-Samy 是OWASP上的一个开源项目，可使用于Java、.NET等。  HTMLPurify可使用于PHP中。
        5.防御DOM Based XSS    如果是输出到事件或脚本，要做一次javascriptEncode；如果是输出到HTML内容或者属性，要做一次HtmlEncode。


 * @CSRF攻击
 * @跨站请求伪造：一个跨站请求伪造攻击迫使登陆用户的浏览器将伪造的http请求，包括用户会话cookie和其他认证信息，发送到一个存在漏洞的web应用程序。
 * @本质：重要操作的所有参数都是可以被攻击者猜测到，使攻击者成功构造出一个伪造的，指定应用服务器认为是合法的请求。
 * @CSRF攻击手段：
 * @原因：
 * @防御措施：
 				1.验证码、  Referer Check 检查请求是否来自合法的源（可被伪造）。
 				2.Token   使用Anti-CSRF Token   在URL中保持原参数不变，新增一个参数Token。Token的值是随机的（必须使用足够安全的随机数生成算法，或者采用真随机数生成器），其为用户与服务器所共同持有，可以放在用户的Session中，或者浏览器的Cookie中。 注意保密，尽量把Token放在表单中（构造一个隐藏的input元素），以POST提交，避免Token泄露。
 * @注意：如果网站有XSS漏洞或者一些跨域漏洞，可能导致Token泄露。 
          在XSS攻击下，读取Token值，然后再构造出一个合法的请求，可以称为：XSRF。


 * 常见前端框架对XSS攻击的防范   
 		1.React 默认会转义所有字符串。
 		2.AngularJS    使用AngularJS中的SCE来防御XSS攻击。

 * Web安全扫描器
 		1.商业软件：IBM Rational Appscan、WebInspect、Acunetix WVS
		2.免费软件：W3AF、SkipFish




		

 */


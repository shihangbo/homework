
答案如下：

1.从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）
2.开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识）
3.从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）
4.后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）
5.单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等）
6.浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等）
7.CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）
8.JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）
9.其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）

知识模块
1.硬件交互：键盘输入，和操作系统交互，屏幕显示原理，网卡等
2.浏览器模型：指浏览器是多线程的，浏览器内核（浏览器渲染进程），输入url后会开启一个新的网络线程
3.开启网络线程到发出一个完整的http请求中间发生了什么：dns查询，tcp／ip链接，五层因特尔协议栈等等，以及优化方案
4.web服务器：负载均衡，安全拦截，后台代码处理
5.http模块：http报文结构，报文头部，cookie，跨域，web安全，http缓存，http2.0，https，网络攻击等等
6.浏览器渲染引擎：html解析，此法分析然后解析成dom树，css解析生成css规则树，合并成render树，然后layout，painting渲染，
	里面可能包括复合图层的合成，GPU绘制，外链处理，加载顺序等
7.浏览器js执行引擎：js解释，预处理，执行上下文，vo，作用域链，this，回收机制等

知识点
1.多线程的浏览器内核（浏览器渲染进程）：默认每个tab页面一个进程，互不影响，控制页面渲染，脚本执行，事件处理等（有时候会优化，如多个空白tab合并成一个进程）
	- GUI渲染线程
	- js执行引擎
	- 事件触发线程
	- 定时器线程
	- 网络请求线程
	- ...
2.js执行引擎原理
	1.js是单线程的
	2.js的event loop是js执行机制，也是js单线程实现异步的机制
	3.几个概念：事件循环 event loop，主线程执行，事件队列 event queue，同步任务，异步任务（宏任务[script, setTimeout, setInterval]，微任务[Promise, process.nextTick]）
